//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    #[sea_orm(unique)]
    pub api_key: String,
    pub name: String,
    pub reset_token: Option<String>,
    pub reset_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verification_token: Option<String>,
    pub email_verification_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verified_at: Option<DateTimeWithTimeZone>,
    pub magic_link_token: Option<String>,
    pub magic_link_expiration: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::global_materials::Entity")]
    GlobalMaterials,
    #[sea_orm(has_many = "super::global_recipes::Entity")]
    GlobalRecipes,
    #[sea_orm(has_many = "super::unit_bases::Entity")]
    UnitBases,
    #[sea_orm(has_many = "super::unit_categories::Entity")]
    UnitCategories,
    #[sea_orm(has_many = "super::units::Entity")]
    Units,
}

impl Related<super::global_materials::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GlobalMaterials.def()
    }
}

impl Related<super::global_recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GlobalRecipes.def()
    }
}

impl Related<super::unit_bases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UnitBases.def()
    }
}

impl Related<super::unit_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UnitCategories.def()
    }
}

impl Related<super::units::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Units.def()
    }
}
