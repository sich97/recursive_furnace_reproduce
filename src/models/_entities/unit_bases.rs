//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "unit_bases")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name_base: String,
    #[sea_orm(column_type = "Text", unique)]
    pub name_plural: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub symbol: Option<String>,
    pub created_by: i32,
    pub unit_category: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::unit_categories::Entity",
        from = "Column::UnitCategory",
        to = "super::unit_categories::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UnitCategories,
    #[sea_orm(has_many = "super::units::Entity")]
    Units,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::unit_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UnitCategories.def()
    }
}

impl Related<super::units::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Units.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
